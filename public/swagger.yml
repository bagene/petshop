openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://petshop-payment.test/api
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /users/login:
    post:
      summary: Authenticate to get jwt token
      description: Authenticate to get jwt token
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: password
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /payments/{uuid}:
    get:
      summary: Get Payment
      description: Get Payment by uuid
      parameters:
        - name: uuid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string            
      responses:
        '200':
          description: Get Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
        '402':
          description: Card Declined
      security:
        - bearerAuth:
  /orders/{uuid}/payments:
    patch:
      summary: Pay order by uuid
      description: Pay order by uuid and redirect to payments
      parameters:
        - name: uuid
          in: path
          description: Order uuid
          required: true
          schema:
            type: string
      requestBody:
        description: Card Payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/card'
      responses:
        '200':
          description: Get Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment'
        '402':
          description: Card Declined
      security:
        - bearerAuth:
components:
  schemas:
    payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        uuid:
          type: uuid
          example: 415834b1-a411-4470-b944-5ab423fadbae
        type:
          type: string
          enum:
            - credit_card
            - cash_on_delivery
            - bank
        details:
          type: string
          example: {}
    card:
      type: object
      properties:
        number:
          type: string
        exp_month:
          type: integer
        exp_year:
          type: integer
        ccv:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  